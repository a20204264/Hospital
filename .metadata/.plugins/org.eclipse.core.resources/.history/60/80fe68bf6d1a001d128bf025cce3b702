package com.idat.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.idat.DTO.ClienteDTORequest;
import com.idat.DTO.ClienteDTOResponse;
import com.idat.DTO.DoctorDTORequest;
import com.idat.Service.ClienteService;

@Controller
@RequestMapping("/cliente/v1")
public class ClienteController {
	
	@Autowired
	private ClienteService service;
	
	
			//LISTAR TODO
			@RequestMapping("/listar")
			public @ResponseBody ResponseEntity<List<ClienteDTOResponse>> listar() {				
				
				return new ResponseEntity<List<ClienteDTOResponse>>( service.listar(), HttpStatus.OK);
			}
			
			
			//OBTENER POR ID:
			@GetMapping("/{id}")
			public  @ResponseBody ClienteDTOResponse ObtenerProductoId(@PathVariable Integer id) {
				return service.ObtenerId(id);
			}
			
						
			//GUARDAR
			@RequestMapping(path = "/guardar", method = RequestMethod.POST)
			public ResponseEntity<Void> guardar(@RequestBody ClienteDTORequest cliente) {
				service.guardar(cliente);
				return new ResponseEntity<Void>(HttpStatus.CREATED);
			}
			
			
			//ELIMINAR
			@RequestMapping(path = "/eliminar/{id}", method = RequestMethod.DELETE)
			public ResponseEntity<Void> eliminar(@PathVariable Integer id) {
				
				ClienteDTOResponse cliente=service.ObtenerId(id);
				
				if(cliente != null) {
					service.eliminar(id);
					
					return new ResponseEntity<Void>(HttpStatus.OK);
				}
				return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
			}
			
			//ACTUALIZAR
			@RequestMapping(path = "/actualizar", method = RequestMethod.PUT)
			public ResponseEntity<Void> actualizar(@RequestBody ClienteDTORequest cliente) {
				
				ClienteDTOResponse clientes=service.ObtenerId(cliente.getIdcli());
				
				if(clientes != null) {
					service.actualizar(cliente);
					
					return new ResponseEntity<Void>(HttpStatus.OK);
				}
				return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
			}

			//LISTAR POR ID
			@RequestMapping(path = "/listar/{id}", method = RequestMethod.GET)
			public ResponseEntity<ClienteDTOResponse> obtenerId(@PathVariable Integer id) {
				
				ClienteDTOResponse c=service.ObtenerId(id);
				
				if(c != null) {			
					
					return new ResponseEntity<ClienteDTOResponse>(service.ObtenerId(id), HttpStatus.OK);
				}
				return new ResponseEntity<ClienteDTOResponse>(HttpStatus.NOT_FOUND);
			}

	

}
